"use strict";(self.webpackChunkblog_website=self.webpackChunkblog_website||[]).push([[8012],{2287:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var a=o(7166),s=o(5105),i=o(7890);const r={slug:"comprehension-of-javascript",title:"Comprehension of JavaScript",authors:["marvin-season"],tags:["promise","javscript"]},t=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Event Loop",id:"event-loop",level:2},{value:"Promise",id:"promise",level:2},{value:"Async/Await",id:"asyncawait",level:2},{value:"Recap",id:"recap",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"As we all know, JavaScript is a single-threaded language. This means that only one task can be executed at a time.\nSo, if you have a long-running task, it will block the execution of other tasks."}),"\n",(0,s.jsxs)(n.p,{children:["Actually, JavaScript is a single-threaded language, but it has a non-blocking I/O model. This means that JavaScript can perform multiple tasks at the same time.\nHow does JavaScript achieve this? The answer is ",(0,s.jsx)(n.strong,{children:"Event Loop"}),"."]}),"\n","\n",(0,s.jsx)(n.h2,{id:"event-loop",children:"Event Loop"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop",children:"MDN Web Docs"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The Event Loop is a mechanism that allows JavaScript to perform non-blocking I/O operations. It is responsible for handling asynchronous operations in JavaScript.\nOn the other hand, the Event Loop is an approach to achieve asynchronous programming."}),"\n",(0,s.jsx)(n.p,{children:"The Event Loop is a loop that continuously checks the call stack and the task queue. If the call stack is empty, it will take the first task from the task queue and push it onto the call stack."}),"\n",(0,s.jsx)(n.p,{children:"Pseudo code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"while (queue.waitForMessage()) {\n  queue.processNextMessage();\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"More specifically, the Event Loop consists of the following components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function runJs() {\n  let syncStack = [] // \u540c\u6b65\u6267\u884c\u6808\n  let asyncMicroQueue = [] // \u5f02\u6b65\u5fae\u4efb\u52a1\u961f\u5217\n  let asyncMacroQueue = [] // \u5f02\u6b65\u5b8f\u4efb\u52a1\u961f\u5217\n\n  function runSyncStack() { // \u4e3b\u7ebf\u7a0b\n    while (syncStack.length) syncStack.pop()() // \u6e05\u7a7a\u540c\u6b65\u6267\u884c\u6808\n    reRender() // \u91cd\u65b0\u6e32\u67d3\n    runAsyncQueue() // \u4ece\u4efb\u52a1\u961f\u5217\u53d6\u51fa\u5f02\u6b65\u4efb\u52a1\u6267\u884c\n  }\n\n  function runAsyncQueue() { // \u4efb\u52a1\u961f\u5217\n    while (asyncMicroQueue.length) asyncMicroQueue.shift()() // \u5148\u6e05\u7a7a\u5fae\u4efb\u52a1\u961f\u5217\n\n    while (asyncMacroQueue.length) {\n       // \u6bcf\u6267\u884c\u4e00\u4e2a\u5f02\u6b65\u5b8f\uff0c\u5c31\u8981\u6e05\u7a7a\u4e00\u6b21\u5fae\u4efb\u52a1\u961f\u5217\uff08\u56e0\u4e3a\u6709\u53ef\u80fd\u5f02\u6b65\u5b8f\u4f1a\u5f80\u5fae\u4efb\u52a1\u961f\u5217push\u5f02\u6b65\u5fae\uff09\n      asyncMacroQueue.shift()()\n      while (asyncMicroQueue.length) asyncMicroQueue.shift()()\n    }\n    runSyncStack() // \u56de\u5230js\u4e3b\u7ebf\u7a0b\n  }\n  runSyncStack()\n}\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In concurrent programming, thread synchronization is often a concern.\nIn JavaScript, how do multiple asynchronous operations synchronize data? The answer is ",(0,s.jsx)(n.strong,{children:"Promise"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"promise",children:"Promise"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"MDN Web Docs"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://medium.com/@PavanCodeCraft/mastering-promises-in-javascript-41a0c9df7473",children:"Comprehensive of promise"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Promise is a JavaScript object for asynchronous operations. It represents a value which may be available now, or in the future, or never."}),"\n",(0,s.jsx)(n.p,{children:"Asynchronous operations are common in JavaScript, and often require a callback function."}),"\n",(0,s.jsxs)(n.p,{children:["For example, the ",(0,s.jsx)(n.code,{children:"setTimeout"})," function is used to run a function after a certain number of milliseconds. The callback function is called after the timer has expired."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// async operation\nsetTimeout(() => {\n  console.log("Hello, world!");\n}, 1000);\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"The callback function is called when the async operation is completed. This is known as a callback-based approach."}),"\n",(0,s.jsxs)(n.p,{children:["However, callback-based code can be difficult to read and maintain.To Solve this problem, ",(0,s.jsx)(n.strong,{children:"Promises"})," were introduced in ",(0,s.jsx)(n.strong,{children:"ES6"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"With Promises, you can write asynchronous code that looks synchronous. This makes it easier to read and maintain."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function asyncOperation() {\n  console.log('sync code 2');\n  // sync code\n  return new Promise((resolve, reject) => {\n    // return a promise for async operation\n    console.log('sync code before async operation');\n    // start async operation\n    setTimeout(() => {\n        console.log('async operation completed');\n      // async operation is completed, resolve the promise\n      resolve();\n    }, 1000);\n  });\n}\nconsole.log('sync code 1');\nasyncOperation().then(() => {\n  console.log('promise resolved');\n});\nconsole.log('sync code 3');\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sync code 1\nsync code 2\nsync code before async operation\nsync code 3\nasync operation completed\npromise resolved\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the above code, the ",(0,s.jsx)(n.code,{children:"asyncOperation"})," function returns a Promise object. The ",(0,s.jsx)(n.code,{children:"then"})," method is used to handle the resolved value of the Promise."]}),"\n",(0,s.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant MainThread as \u4e3b\u7ebf\u7a0b (JavaScript)\n    participant WebAPI as Web API (setTimeout)\n    participant MacroTaskQueue as \u5b8f\u4efb\u52a1\u961f\u5217\n    participant MicroTaskQueue as \u5fae\u4efb\u52a1\u961f\u5217 (Promise)\n\n    Note over MainThread: (\u4ee3\u7801\u5f00\u59cb\u6267\u884c)\n    \n    MainThread->>MainThread: console.log("sync code 1") (\u540c\u6b65\u6267\u884c)\n\n    MainThread->>MainThread: \u8c03\u7528 asyncOperation()\n    MainThread->>MainThread: console.log("sync code 2") (\u540c\u6b65\u6267\u884c)\n    \n    MainThread->>MainThread: new Promise() (\u540c\u6b65\u6267\u884c)\n    MainThread->>MainThread: console.log("sync code before async operation")\n    \n    MainThread->>WebAPI: setTimeout(fn, 1000) (\u6ce8\u518c\u5f02\u6b65\u4efb\u52a1)\n    Note over WebAPI: 1 \u79d2\u540e\uff0c\u5c06\u56de\u8c03\u653e\u5165\u5b8f\u4efb\u52a1\u961f\u5217\n    \n    MainThread->>MainThread: \u8fd4\u56de Promise \u5e76\u7ee7\u7eed\u6267\u884c\u540c\u6b65\u4ee3\u7801\n    MainThread->>MainThread: console.log("sync code 3") (\u540c\u6b65\u6267\u884c)\n    \n    Note over MainThread: (\u540c\u6b65\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\uff0c\u4e8b\u4ef6\u5faa\u73af\u5f00\u59cb)\n\n    Note over WebAPI: (1 \u79d2\u540e\u5b9a\u65f6\u5668\u5230\u8fbe)\n    WebAPI--\x3e>MacroTaskQueue: \u5c06 setTimeout \u56de\u8c03\u653e\u5165\u5b8f\u4efb\u52a1\u961f\u5217\n\n    Note over MainThread: (\u4e3b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u68c0\u67e5\u4efb\u52a1\u961f\u5217)\n\n    MacroTaskQueue->>MainThread: \u53d6\u51fa setTimeout \u56de\u8c03\u5e76\u6267\u884c\n    MainThread->>MainThread: console.log("async operation completed")\n    \n    Note over MainThread: resolve() \u89e6\u53d1 Promise\n    MainThread--\x3e>MicroTaskQueue: \u5c06 then()\u56de\u8c03 \u653e\u5165\u5fae\u4efb\u52a1\u961f\u5217\n\n    Note over MainThread: (\u4e3b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u68c0\u67e5\u4efb\u52a1\u961f\u5217)\n\n    MicroTaskQueue->>MainThread: \u53d6\u51fa\u6267\u884c Promise.then()\u56de\u8c03\n    MainThread->>MainThread: console.log("promise resolved")\n\n    Note over MainThread: (\u6240\u6709\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5)'}),"\n",(0,s.jsx)(n.p,{children:"Promises can be in one of three states:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pending: Initial state, neither fulfilled nor rejected."}),"\n",(0,s.jsx)(n.li,{children:"Fulfilled: The operation completed successfully."}),"\n",(0,s.jsx)(n.li,{children:"Rejected: The operation failed."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If the promise is resolved by async operation, the ",(0,s.jsx)(n.code,{children:"then"})," method is called.\nIf the promise is rejected, the ",(0,s.jsx)(n.code,{children:"catch"})," method is called."]}),"\n",(0,s.jsx)(n.h2,{id:"asyncawait",children:"Async/Await"}),"\n",(0,s.jsxs)(n.p,{children:["Actually, the ",(0,s.jsx)(n.code,{children:"async/await"})," syntax is built on top of Promises. It is a ",(0,s.jsx)(n.strong,{children:"syntactic sugar"})," for Promises."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function asyncOperation(){}\n// equivalent to\nfunction asyncOperation() {\n  return Promise.resolve();\n}\n// equivalent to\nfunction asyncOperation() {\n  return new Promise((resolve, reject) => {\n    resolve();\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The above three functions are equivalent. The ",(0,s.jsx)(n.code,{children:"async"})," keyword is used to define an asynchronous function, and the following code is equivalent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function main() {\n  asyncOperation().then(() => {\n    console.log('promise resolved');\n  });\n  // equivalent to\n  await asyncOperation();\n  console.log('promise resolved');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"await"})," keyword is used to wait for the completion of an asynchronous operation. It can only be used inside an ",(0,s.jsx)(n.code,{children:"async"})," function."]}),"\n",(0,s.jsx)(n.h2,{id:"recap",children:"Recap"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Event Loop is a mechanism that allows JavaScript to perform non-blocking I/O operations."}),"\n",(0,s.jsx)(n.li,{children:"Promise is a container for interactions between asynchronous operations."}),"\n",(0,s.jsx)(n.li,{children:"Async/Await is a syntactic sugar for Promises."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},7890:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>t});var a=o(8101);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},7166:e=>{e.exports=JSON.parse('{"permalink":"/danny-website/blog/comprehension-of-javascript","source":"@site/blog/comprehension-of-javascript/index.mdx","title":"Comprehension of JavaScript","description":"As we all know, JavaScript is a single-threaded language. This means that only one task can be executed at a time.","date":"2025-02-12T06:00:37.000Z","tags":[{"inline":false,"label":"Promise","permalink":"/danny-website/blog/tags/promise","description":"Promise tag description"},{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"}],"readingTime":5.25,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"comprehension-of-javascript","title":"Comprehension of JavaScript","authors":["marvin-season"],"tags":["promise","javscript"]},"unlisted":false,"nextItem":{"title":"Tiptap Practise","permalink":"/danny-website/blog/tiptap"}}')}}]);