"use strict";(self.webpackChunkblog_website=self.webpackChunkblog_website||[]).push([[1313],{4606:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"comprehension-of-javascript","metadata":{"permalink":"/danny-website/blog/comprehension-of-javascript","source":"@site/blog/comprehension-of-javascript/index.mdx","title":"Comprehension of JavaScript","description":"As we all know, JavaScript is a single-threaded language. This means that only one task can be executed at a time.","date":"2025-02-12T06:00:37.000Z","tags":[{"inline":false,"label":"Promise","permalink":"/danny-website/blog/tags/promise","description":"Promise tag description"},{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"}],"readingTime":5.25,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"comprehension-of-javascript","title":"Comprehension of JavaScript","authors":["marvin-season"],"tags":["promise","javscript"]},"unlisted":false,"nextItem":{"title":"Tiptap Practise","permalink":"/danny-website/blog/tiptap"}},"content":"As we all know, JavaScript is a single-threaded language. This means that only one task can be executed at a time.\\nSo, if you have a long-running task, it will block the execution of other tasks.  \\n\\nActually, JavaScript is a single-threaded language, but it has a non-blocking I/O model. This means that JavaScript can perform multiple tasks at the same time.\\nHow does JavaScript achieve this? The answer is **Event Loop**.\\n\\n{/* truncate  */}\\n\\n## Event Loop\\n\\n- [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop)\\n\\nThe Event Loop is a mechanism that allows JavaScript to perform non-blocking I/O operations. It is responsible for handling asynchronous operations in JavaScript.\\nOn the other hand, the Event Loop is an approach to achieve asynchronous programming.\\n\\nThe Event Loop is a loop that continuously checks the call stack and the task queue. If the call stack is empty, it will take the first task from the task queue and push it onto the call stack.\\n\\nPseudo code:\\n```javascript\\nwhile (queue.waitForMessage()) {\\n  queue.processNextMessage();\\n}\\n\\n```\\nMore specifically, the Event Loop consists of the following components:\\n```js\\nfunction runJs() {\\n  let syncStack = [] // \u540c\u6b65\u6267\u884c\u6808\\n  let asyncMicroQueue = [] // \u5f02\u6b65\u5fae\u4efb\u52a1\u961f\u5217\\n  let asyncMacroQueue = [] // \u5f02\u6b65\u5b8f\u4efb\u52a1\u961f\u5217\\n\\n  function runSyncStack() { // \u4e3b\u7ebf\u7a0b\\n    while (syncStack.length) syncStack.pop()() // \u6e05\u7a7a\u540c\u6b65\u6267\u884c\u6808\\n    reRender() // \u91cd\u65b0\u6e32\u67d3\\n    runAsyncQueue() // \u4ece\u4efb\u52a1\u961f\u5217\u53d6\u51fa\u5f02\u6b65\u4efb\u52a1\u6267\u884c\\n  }\\n\\n  function runAsyncQueue() { // \u4efb\u52a1\u961f\u5217\\n    while (asyncMicroQueue.length) asyncMicroQueue.shift()() // \u5148\u6e05\u7a7a\u5fae\u4efb\u52a1\u961f\u5217\\n\\n    while (asyncMacroQueue.length) {\\n       // \u6bcf\u6267\u884c\u4e00\u4e2a\u5f02\u6b65\u5b8f\uff0c\u5c31\u8981\u6e05\u7a7a\u4e00\u6b21\u5fae\u4efb\u52a1\u961f\u5217\uff08\u56e0\u4e3a\u6709\u53ef\u80fd\u5f02\u6b65\u5b8f\u4f1a\u5f80\u5fae\u4efb\u52a1\u961f\u5217push\u5f02\u6b65\u5fae\uff09\\n      asyncMacroQueue.shift()()\\n      while (asyncMicroQueue.length) asyncMicroQueue.shift()()\\n    }\\n    runSyncStack() // \u56de\u5230js\u4e3b\u7ebf\u7a0b\\n  }\\n  runSyncStack()\\n}\\n\\n```\\n\\nIn concurrent programming, thread synchronization is often a concern. \\nIn JavaScript, how do multiple asynchronous operations synchronize data? The answer is **Promise**.\\n\\n\\n## Promise\\n - [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\n - [Comprehensive of promise](https://medium.com/@PavanCodeCraft/mastering-promises-in-javascript-41a0c9df7473)\\n\\nPromise is a JavaScript object for asynchronous operations. It represents a value which may be available now, or in the future, or never.\\n\\nAsynchronous operations are common in JavaScript, and often require a callback function. \\n\\nFor example, the `setTimeout` function is used to run a function after a certain number of milliseconds. The callback function is called after the timer has expired.\\n\\n```js\\n// async operation\\nsetTimeout(() => {\\n  console.log(\\"Hello, world!\\");\\n}, 1000);\\n\\n```\\n\\nThe callback function is called when the async operation is completed. This is known as a callback-based approach.\\n\\nHowever, callback-based code can be difficult to read and maintain.To Solve this problem, **Promises** were introduced in **ES6**.\\n\\nWith Promises, you can write asynchronous code that looks synchronous. This makes it easier to read and maintain.\\n\\n```js\\nfunction asyncOperation() {\\n  console.log(\'sync code 2\');\\n  // sync code\\n  return new Promise((resolve, reject) => {\\n    // return a promise for async operation\\n    console.log(\'sync code before async operation\');\\n    // start async operation\\n    setTimeout(() => {\\n        console.log(\'async operation completed\');\\n      // async operation is completed, resolve the promise\\n      resolve();\\n    }, 1000);\\n  });\\n}\\nconsole.log(\'sync code 1\');\\nasyncOperation().then(() => {\\n  console.log(\'promise resolved\');\\n});\\nconsole.log(\'sync code 3\');\\n```\\n\\n**Output:**\\n```sh\\nsync code 1\\nsync code 2\\nsync code before async operation\\nsync code 3\\nasync operation completed\\npromise resolved\\n```\\nIn the above code, the `asyncOperation` function returns a Promise object. The `then` method is used to handle the resolved value of the Promise.\\n\\n```mermaid\\nsequenceDiagram\\n    participant MainThread as \u4e3b\u7ebf\u7a0b (JavaScript)\\n    participant WebAPI as Web API (setTimeout)\\n    participant MacroTaskQueue as \u5b8f\u4efb\u52a1\u961f\u5217\\n    participant MicroTaskQueue as \u5fae\u4efb\u52a1\u961f\u5217 (Promise)\\n\\n    Note over MainThread: (\u4ee3\u7801\u5f00\u59cb\u6267\u884c)\\n    \\n    MainThread->>MainThread: console.log(\\"sync code 1\\") (\u540c\u6b65\u6267\u884c)\\n\\n    MainThread->>MainThread: \u8c03\u7528 asyncOperation()\\n    MainThread->>MainThread: console.log(\\"sync code 2\\") (\u540c\u6b65\u6267\u884c)\\n    \\n    MainThread->>MainThread: new Promise() (\u540c\u6b65\u6267\u884c)\\n    MainThread->>MainThread: console.log(\\"sync code before async operation\\")\\n    \\n    MainThread->>WebAPI: setTimeout(fn, 1000) (\u6ce8\u518c\u5f02\u6b65\u4efb\u52a1)\\n    Note over WebAPI: 1 \u79d2\u540e\uff0c\u5c06\u56de\u8c03\u653e\u5165\u5b8f\u4efb\u52a1\u961f\u5217\\n    \\n    MainThread->>MainThread: \u8fd4\u56de Promise \u5e76\u7ee7\u7eed\u6267\u884c\u540c\u6b65\u4ee3\u7801\\n    MainThread->>MainThread: console.log(\\"sync code 3\\") (\u540c\u6b65\u6267\u884c)\\n    \\n    Note over MainThread: (\u540c\u6b65\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\uff0c\u4e8b\u4ef6\u5faa\u73af\u5f00\u59cb)\\n\\n    Note over WebAPI: (1 \u79d2\u540e\u5b9a\u65f6\u5668\u5230\u8fbe)\\n    WebAPI--\x3e>MacroTaskQueue: \u5c06 setTimeout \u56de\u8c03\u653e\u5165\u5b8f\u4efb\u52a1\u961f\u5217\\n\\n    Note over MainThread: (\u4e3b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u68c0\u67e5\u4efb\u52a1\u961f\u5217)\\n\\n    MacroTaskQueue->>MainThread: \u53d6\u51fa setTimeout \u56de\u8c03\u5e76\u6267\u884c\\n    MainThread->>MainThread: console.log(\\"async operation completed\\")\\n    \\n    Note over MainThread: resolve() \u89e6\u53d1 Promise\\n    MainThread--\x3e>MicroTaskQueue: \u5c06 then()\u56de\u8c03 \u653e\u5165\u5fae\u4efb\u52a1\u961f\u5217\\n\\n    Note over MainThread: (\u4e3b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u68c0\u67e5\u4efb\u52a1\u961f\u5217)\\n\\n    MicroTaskQueue->>MainThread: \u53d6\u51fa\u6267\u884c Promise.then()\u56de\u8c03\\n    MainThread->>MainThread: console.log(\\"promise resolved\\")\\n\\n    Note over MainThread: (\u6240\u6709\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5)\\n```\\n\\nPromises can be in one of three states:\\n- Pending: Initial state, neither fulfilled nor rejected.\\n- Fulfilled: The operation completed successfully.\\n- Rejected: The operation failed.\\n\\nIf the promise is resolved by async operation, the `then` method is called. \\nIf the promise is rejected, the `catch` method is called.\\n\\n## Async/Await\\nActually, the `async/await` syntax is built on top of Promises. It is a **syntactic sugar** for Promises.\\n```js\\nasync function asyncOperation(){}\\n// equivalent to\\nfunction asyncOperation() {\\n  return Promise.resolve();\\n}\\n// equivalent to\\nfunction asyncOperation() {\\n  return new Promise((resolve, reject) => {\\n    resolve();\\n  });\\n}\\n```\\n\\nThe above three functions are equivalent. The `async` keyword is used to define an asynchronous function, and the following code is equivalent.\\n```js\\nasync function main() {\\n  asyncOperation().then(() => {\\n    console.log(\'promise resolved\');\\n  });\\n  // equivalent to\\n  await asyncOperation();\\n  console.log(\'promise resolved\');\\n}\\n```\\n\\nThe `await` keyword is used to wait for the completion of an asynchronous operation. It can only be used inside an `async` function.\\n\\n## Recap\\n- Event Loop is a mechanism that allows JavaScript to perform non-blocking I/O operations.\\n- Promise is a container for interactions between asynchronous operations.\\n- Async/Await is a syntactic sugar for Promises."},{"id":"tiptap","metadata":{"permalink":"/danny-website/blog/tiptap","source":"@site/blog/rich-editor/tiptap.mdx","title":"Tiptap Practise","description":"Tiptap is a renderless rich-text editor lib","date":"2025-02-05T00:00:00.000Z","tags":[{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"},{"inline":true,"label":"tiptap","permalink":"/danny-website/blog/tags/tiptap"}],"readingTime":1.535,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"description":"Tiptap is a renderless rich-text editor lib","slug":"tiptap","title":"Tiptap Practise","authors":["marvin-season"],"tags":["javscript","tiptap"],"date":"2025-02-05"},"unlisted":false,"prevItem":{"title":"Comprehension of JavaScript","permalink":"/danny-website/blog/comprehension-of-javascript"},"nextItem":{"title":"React Develop","permalink":"/danny-website/blog/react-develop"}},"content":"import { RichEditor } from \'@site/src/components/rich-editor\'\\n\\n<RichEditor />\\n\\n\\n## Core Concept\\n- **Editor**: The main editor component\\n    - **Node**: A piece of content in the editor\\n    - **Mark**: A piece of text formatting\\n    - **Extension**: A piece of functionality\\n- **Schema**: The structure of the document\\n- **Commands**: Functions to manipulate the editor\\n- **Plugins**: Extend the editor with custom functionality\\n- **State**: The current state of the editor\\n\\n{/* truncate  */}\\n\\n## Design\\n```mermaid\\nsequenceDiagram\\n    participant User\\n    participant Editor\\n    participant CustomNode\\n\\n    Note over Editor: \u521d\u59cb\u5316\u6587\u672c \\"name: {{name}}, age: {{age}}\\"\\n    Note over Editor: \u81ea\u5b9a\u4e49\u8282\u70b9\u5339\u914d\u89c4\u5219\\n    Editor--\x3e>Editor: \u53cd\u5e8f\u5217\u5316\u4e3a JSON\\n    Editor--\x3e>CustomNode: \u81ea\u5b9a\u4e49\u8282\u70b9\u5904\u7406\\n    CustomNode--\x3e>CustomNode: \u81ea\u5b9a\u4e49\u6e32\u67d3\u903b\u8f91\\n    CustomNode --\x3e>Editor: \u6e32\u67d3\u81ea\u5b9a\u4e49\u7ec4\u4ef6\\n    Editor->>User: \u6e32\u67d3\u6587\u672c\\n    User->>Editor: \u4fee\u6539\u6587\u672c\\n    Editor--\x3e>Editor: \u66f4\u65b0 JSON\\n    Editor->>User: \u6e32\u67d3\u6587\u672c\\n    User->>Editor: \u4fdd\u5b58\u6587\u672c\\n    \\n    Editor--\x3e>User: \u5e8f\u5217\u5316\u4e3a \u6587\u672c\u4fe1\u606f\\n    Note over Editor: \u81ea\u5b9a\u4e49\u8282\u70b9\u5339\u914d\u89c4\u5219\\n```\\n## What\\nA RichEditor.\\n## How\\nCreating a custom node.\\n## Core Code\\n```tsx\\nconst View = ({ node, updateAttributes }: NodeViewProps) => {\\n    const { type, value, options, placeholder } = node.attrs\\n\\n    const handleInput = (e: React.FormEvent) => {\\n        const inputElement = e.target as HTMLInputElement;\\n        const newValue = inputElement.value || \'\';\\n        updateAttributes({ value: newValue })\\n    };\\n\\n    // dynaimc with of input\\n    const count = caculteWidth(value ? value : placeholder);\\n\\n    return (\\n        <NodeViewWrapper as=\\"span\\">\\n            <NodeViewContent\\n                as={\'input\'}\\n                style={{ width: `${count}rem` }}\\n                contentEditable={false}\\n                onInput={handleInput}\\n                placeholder={placeholder}\\n                defaultValue={value}\\n            >\\n            </NodeViewContent>\\n        </NodeViewWrapper>\\n    )\\n}\\n\\nconst InlinePlaceholder = Node.create<InlinePlaceholderAttributes>({\\n    renderHTML({ HTMLAttributes, node }) {\\n        const attrs = mergeAttributes(\\n            this.options.HTMLAttributes || {},\\n            HTMLAttributes,\\n        );\\n        return [\'span\', attrs, 0]; // 0 or child of span\\n    },\\n    addNodeView() {\\n        return ReactNodeViewRenderer(View);\\n    },\\n})\\n```"},{"id":"react-develop","metadata":{"permalink":"/danny-website/blog/react-develop","source":"@site/blog/react-develop/index.mdx","title":"React Develop","description":"","date":"2025-02-04T00:00:00.000Z","tags":[{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"}],"readingTime":0.025,"hasTruncateMarker":false,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"react-develop","title":"React Develop","authors":["marvin-season"],"tags":["javscript"],"date":"2025-02-04"},"unlisted":false,"prevItem":{"title":"Tiptap Practise","permalink":"/danny-website/blog/tiptap"},"nextItem":{"title":"AI","permalink":"/danny-website/blog/ai"}},"content":"import A from \'./attach-selector\'\\n\\n<A/>"},{"id":"ai","metadata":{"permalink":"/danny-website/blog/ai","source":"@site/blog/ai/index.mdx","title":"AI","description":"Basic Concepts","date":"2024-02-06T00:00:00.000Z","tags":[{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"},{"inline":false,"label":"AI","permalink":"/danny-website/blog/tags/ai","description":"AI tag description"}],"readingTime":0.31,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"ai","title":"AI","authors":["marvin-season"],"tags":["javscript","ai"],"date":"2024-02-06"},"unlisted":false,"prevItem":{"title":"React Develop","permalink":"/danny-website/blog/react-develop"},"nextItem":{"title":"Echart","permalink":"/danny-website/blog/echart"}},"content":"import AI from \'./components/ai\';\\n\\n<AI />\\n\\n## Basic Concepts\\nAIInput is a component that can collect user input and handle it.\\n\\n```tsx\\ntype CoreInputProps = {\\n    onSend: (value: string, attachments: Attachment[]) => void;\\n    attachmentRender: (value: string, onSelect: (attactment: Attachment) => void) => JSX.Element;\\n    attachmentDisplayer: (attachments: Attachment[], setAttachments: AttachmentSetter) => JSX.Element;\\n    attachmentHandler?: (attactment: Attachment, setAttachments: AttachmentSetter) => void;\\n}\\n```\\n\\n{/* truncate  */}"},{"id":"echart","metadata":{"permalink":"/danny-website/blog/echart","source":"@site/blog/echart/react-echart.md","title":"Echart","description":"Echart React","date":"2024-01-08T00:00:00.000Z","tags":[],"readingTime":5.045,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"echart","title":"Echart","authors":["marvin-season"],"tags":[],"date":"2024-01-08"},"unlisted":false,"prevItem":{"title":"AI","permalink":"/danny-website/blog/ai"},"nextItem":{"title":"Functional Programming","permalink":"/danny-website/blog/functional-programming"}},"content":"## Echart React\\n\\n\u5bf9\u4e8e\u7ed8\u5236\u56fe\u8868\uff0c\u63d0\u4f9b\u5408\u9002\u7684 options \u7ed9 echart \u5373\u53ef\uff0c\u4f46\u662f\u5f80\u5f80\u9700\u8981\u663e\u793a\u7684\u6570\u636e\u4ece\u63a5\u53e3\u83b7\u53d6\uff0c\u9700\u8981\u5c06\u56fe\u8868\u7684\u6570\u636e\u548c\u6837\u5f0f\u5206\u79bb\u3002\\n\\n\u5047\u8bbe\u6709\u5982\u4e0b\u5c01\u88c5\u597d\u7684\u7ec4\u4ef6\uff1a\\n\\n```js\\n<EchartReact options={options} {...{ others }}></EchartReact>\\n```\\n\\n\x3c!--truncate  --\x3e\\n\\n### \u57fa\u672c\u914d\u7f6e\\n**\u4e00\u4e2a\u57fa\u672c\u7684\u6298\u7ebf\u56fe\u914d\u7f6e**\\n\\n```js\\n// \u56fe\u8868\u7684\u57fa\u672c\u914d\u7f6e\\nexport const baseOption = {\\n  grid: {\\n    top: 8,\\n    left: 20,\\n    bottom: 18,\\n    right: 40,\\n    containLabel: true,\\n  },\\n  tooltip: {\\n    trigger: \\"axis\\",\\n    formatter: \\"{b}: {c}\\",\\n    backgroundColor: \\"#FFFFFF\\",\\n    borderColor: \\"#F6F9FF\\",\\n    textStyle: {\\n      color: \\"#344054\\",\\n      fontSize: 12,\\n    },\\n  },\\n  xAxis: {\\n    type: \\"category\\",\\n    boundaryGap: false,\\n    data: [],\\n    axisLine: {\\n      show: true,\\n      lineStyle: {\\n        color: \\"#9CA3AF\\",\\n      },\\n    },\\n    axisTick: {\\n      show: false,\\n    },\\n    axisLabel: {\\n      show: true,\\n      // interval: 0,\\n      // rotate: 30,\\n      formatter: function (value: any, index: number) {\\n        let formatValue = value;\\n        formatValue = moment(value).format(\\"MMM D, YYYY\\");\\n        return formatValue;\\n      },\\n      padding: [6, 0, 0, 0],\\n    },\\n  },\\n  yAxis: {\\n    type: \\"value\\",\\n    axisLine: {\\n      symbol: \\"arrow\\",\\n      lineStyle: {\\n        color: \\"#9CA3AF\\",\\n        // ...\\n      },\\n    },\\n    axisLabel: {\\n      show: true,\\n      padding: [0, 16, 0, 0],\\n    },\\n  },\\n  series: [\\n    {\\n      name: \\"demo\\",\\n      data: [],\\n      type: \\"line\\",\\n      symbolSize: 4,\\n      itemStyle: {\\n        color: \\"auto\\",\\n        borderGap: \\"round\\",\\n      },\\n      lineStyle: {\\n        color: \\"#276DDC\\",\\n        width: 1,\\n      },\\n      areaStyle: {\\n        color: {\\n          type: \\"linear\\",\\n          x: 0,\\n          y: 0,\\n          x2: 0,\\n          y2: 1,\\n          colorStops: [\\n            {\\n              offset: 0,\\n              color: \\"rgba(234, 242, 255, 0.6)\\", // 0% \u5904\u7684\u989c\u8272\\n            },\\n            {\\n              offset: 1,\\n              color: \\"rgba(234, 242, 255, 0.2)\\", // 100% \u5904\u7684\u989c\u8272\\n            },\\n          ],\\n          global: false, // \u7f3a\u7701\u4e3a false\\n        },\\n      },\\n      emphasis: {\\n        focus: \\"series\\",\\n      },\\n    },\\n  ],\\n};\\n```\\n\\n\u5982\u679c\u53ea\u9700\u8981\u4e00\u4e2a\u56fe\u8868\uff0c\u5c06 data \u8d4b\u503c\u4e3a\u63a5\u53e3\u8fd4\u56de\u7684\u7ed3\u679c\u5373\u53ef\uff0c\u5982\u679c\u6709\u591a\u4e2a\u56fe\u8868\uff08\u76f8\u540c\u7c7b\u578b\uff0c\u63cf\u8ff0\u4e0d\u540c\u4e3b\u9898\uff09\uff0c\u5219\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\uff1a\\n### \u56fe\u8868\u6570\u636e\u7c7b\u578b\u7ea6\u675f\\n```ts\\ninterface EchartData {\\n    options: \'any option of echart\'\\n    ...{\\n        attr: \'another attr of your chart\'\\n    }\\n}\\n\\nconst echartDataArray: EchartData[] = []\\n```\\n### \u56fe\u8868\u6570\u636e\u4e0e\u9884\u5b9a\u4e49\\n\u9884\u5b9a\u4e49\u597d\u5404\u4e2a\u56fe\u8868\u7684\u6837\u5f0f\uff0c\u9664\u4e86\u6570\u636e\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u6ce8\u5165\uff1a\\n\\n```ts\\nconst echartDataArray: EchartData[] = [\\n    {\\n        options: merge(cloneDeep(baseOption), {\\n            series: [\\n                {\\n                    itemStyle: {\\n                        color: \'#10B981\',\\n                    },\\n                }\\n            ]\\n            // ...\\n        )\\n    }\\n]\\n\\n```\\n\\n\u6e32\u67d3 chart \u4e4b\u524d\u9700\u8981\u5c06\u5404\u4e2a\u4e3b\u9898\u7684\u6570\u636e\u585e\u5230\u6570\u7ec4\u5bf9\u5e94\u7684 data \u4e2d,\u9700\u8981\u6ce8\u610f\u5408\u5e76\u6570\u636e\u7684\u64cd\u4f5c\\n`lodash.merge`\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5ffd\u7565 undefined \u7b49\u7a7a\u503c\u7684\u5408\u5e76\uff0c\u4e14\u6570\u7ec4\u5408\u5e76\u5b58\u5728\u91cd\u590d\u5143\u7d20\u7684 bug\uff0c\u6240\u4ee5\u624b\u5199 merge \u51fd\u6570\u6bd4\u8f83\u5408\u9002\\n\\n### \u5408\u9002\u7684\u5408\u5e76\u6570\u636e\u65b9\u6cd5\\n\\n```ts\\nexport const merge = (target: any, source: any) => {\\n  Object.keys(source).forEach((key) => {\\n    if (Array.isArray(source[key])) {\\n      // TODO: \u6570\u7ec4\u9700\u8981\u8fed\u4ee3\u9012\u5f52\uff0c \u8fd9\u91cc\u76ee\u524d\u76f4\u63a5\u66ff\u6362\\n      target[key] = source[key];\\n    } else if (typeof source[key] === \\"object\\") {\\n      target[key] = merge(target[key], source[key]);\\n    } else {\\n      target[key] = source[key];\\n    }\\n  });\\n  return target;\\n};\\n```\\n### \u5bf9\u9f50\u6570\u636e\\n\u5728\u6211\u4eec\u62ff\u5230\u63a5\u53e3\u6570\u636e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u6570\u636e\u7f1d\u5408\u5230\u4e4b\u524d\u9884\u5b9a\u4e49\u7684 EchartDataArray \u4e2d\\n\\n```ts\\nechartDataArray.forEach((item, index) => {\\n  const { options, value } = getEChartData(data, item);\\n\\n  // \u5408\u5e76\u5c5e\u6027\\n  const mergedOptions = merge(cloneDeep(item.options), options);\\n\\n  newData.push({\\n    ...item,\\n    options: mergedOptions,\\n    value,\\n  });\\n});\\n```\\n\\n\u63a5\u53e3\u6570\u636e\u548c\u9884\u5b9a\u4e49\u7684\u6570\u636e\u4e4b\u95f4\u9700\u8981\u505a\u6620\u5c04\uff0c\u4ee5\u4fbf\u4e8e\u6b63\u786e\u7f1d\u5408\u6570\u636e\\n\\n```tsx\\nexport const getEChartData = (data: any, item: AnalyseEchartProps, isRight: boolean) => {\\n  const options = {\\n    xAxis: {\\n      data: [],\\n    },\\n    series: [{ data: [] }],\\n  };\\n  let value: JSX.Element = <></>;\\n\\n  switch (item.id) {\\n    case \'ChartA\': \\n        value = <></>\\n        options.xAxis.data = [\'xxx\']\\n        break;\\n    case \'ChartB\': break;\\n    case \'ChartC\': break;\\n    default break\\n  }\\n  return { options, value }\\n```\\n\\n:::tip\\n+ \u5bf9\u9f50\u6570\u636e\u9700\u8981\u9884\u5b9a\u4e49\u6570\u636e\u6620\u5c04\\n\\n```js\\n// \u56fe\u8868\u5b57\u6bb5\u6620\u5c04\uff08\u524d\u7aef\u540e\u7aef\uff09 => \u7528\u4e8e\u6570\u636e\u8f6c\u6362,\u54ea\u4e2a\u5b57\u6bb5\u662f\u56fe\u8868\u6570\u636e\\nexport const EchartFieldMap = {\\n  MessageNumber: \'allMsgCount\',\\n  ActiveUsersNumber: \'activeUserCount\',\\n  AvgInteractiveNumber: \'averageSessionCount\',\\n  TokenSpeed: \'tokensPerSecond\',\\n  FeeCost: \'tokenCosts\',\\n};\\n// \u7edf\u8ba1\u56fe\u8868\u4e2d\u7684\u67d0\u4e2akey\u7684\u6620\u5c04 => \u5177\u4f53\u56fe\u8868\u6570\u636e\u53d6\u54ea\u4e2a\u503c\\nexport const EchartKeyMap = {\\n  allMsgCount: [\'conversation_count\'],\\n  activeUserCount: [\'terminal_count\'],\\n  averageSessionCount: [\'interactions\'],\\n  tokensPerSecond: [\'tps\'],\\n  tokenCosts: [\'token_count\', \'total_price\'],\\n};\\n```\\n\\n+ \u83b7\u53d6\u3001\u8f6c\u6362\u63a5\u53e3\u6570\u636e\\n    useQuery \u63d0\u4f9b\u4e86\u4e00\u4e2aselect\u56de\u8c03\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406\u6570\u636e\uff0c\u4f8b\u5982\uff1a useEchartsData({}, transform, () =>{}), \u4f20\u5165transform\u51fd\u6570\u6765\u5904\u7406\u6570\u636e\\n\\n```ts\\nexport const useEchartsData = (\\n  params: any,\\n  select?: (data: any) => any,\\n  onSuccess?: (data: any) => void,\\n) => {\\n\\n  return useQuery({\\n    queryKey: [\'echartsData\', params],\\n    queryFn: async () => {\\n      const response = await request(\'/chart\', {\\n        params,\\n      });\\n      return response.data;\\n    },\\n    select,\\n    onSuccess,\\n  });\\n};\\n```\\n\\n+ transform\u5904\u7406\u51fd\u6570\\n```ts\\nconst transform = (data: any) => {\\n    const targetData = cloneDeep(data);\\n\\n    Object.keys(EchartKeyMap).forEach((key: string) => {\\n        EchartKeyMap[key].forEach((someKey: string) => {\\n            // \u81ea\u5b9a\u4e49\u6dfb\u52a0\u4e00\u4e9b\u56fe\u8868\u663e\u793a\u7684\u989d\u5916\u6570\u636e\\n            targetData[key + \'_\' + someKey] = \'someValue\'\\n        })\\n    })\\n}\\n\\n```\\n:::\\n\\n### recap\\n\u603b\u7ed3\u4e00\u4e0b\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a\\n+ \u6570\u636e\u548c\u6837\u5f0f\u5206\u79bb\\n+ \u505a\u597d\u6570\u636e\u6620\u5c04 => \u524d\u7aef\u524d\u7f6e\u5f00\u53d1"},{"id":"functional-programming","metadata":{"permalink":"/danny-website/blog/functional-programming","source":"@site/blog/functional-programming/index.mdx","title":"Functional Programming","description":"Currying","date":"2024-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"}],"readingTime":1.32,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"functional-programming","title":"Functional Programming","authors":["marvin-season"],"tags":["javscript"],"date":"2024-01-01"},"unlisted":false,"prevItem":{"title":"Echart","permalink":"/danny-website/blog/echart"},"nextItem":{"title":"Vue-grid-layout","permalink":"/danny-website/blog/vue-grid-layout"}},"content":"## Currying\\n\\nCurrying is a technique of converting a function that takes multiple arguments into a series of functions that each take a single argument.\\n\\n**In short: Using the characteristics of higher-order functions, the function is partially called according to the parameters.**\\n\\n{/* truncate  */}\\n\\n### Currying Function\\n\\n:::tip\\nUse the **curry** from the lodash library to curry the function add, and get **curriedAdd**\\n:::\\n\\n```js\\nimport { curry } from \\"lodash\\";\\n\\nconst add = (p1, p2, p3) => p1 + p2 + p3;\\n\\nconst curriedAdd = curry(add);\\n```\\n\\n:::tip\\nCall with full arguments to get the final result\\n\\n```js\\ncurriedAdd(1, 2, 3); // 6\\ncurriedAdd(1)(2)(3); // 6\\n```\\n\\nCall with partial arguments to get another functional function curriedAdd100, a function that adds 100\\n\\n```js\\nconst curriedAdd100 = curriedAdd(100);\\ncurriedAdd100(2, 3); // 105\\n```\\n\\nBefore all arguments are called, the returned are all corresponding functional functions\\n\\n```js\\nconst curriedAdd105 = curriedAdd100(5);\\ncurriedAdd105(10); // 115\\n```\\n\\n:::\\n\\n## Compose\\n\\nCompose functions, compose pure functions. For example, a function: f(x) = x^2\\n\\nThe composed functions are like pipelines, executed sequentially from right to left (by default), processing the data.\\n\\n```js\\nimport * as R from \\"ramda\\";\\n\\nconst arr = [{ name: \\"a\\" }, { name: \\"b\\" }];\\n// Use compose to arrange appropriate functions to get the data `A.B`\\n\\nconst func1 = R.compose(\\n  R.join(\\".\\"),\\n  R.map(R.compose(R.toUpper, R.prop(\\"name\\")))\\n);\\n\\nconsole.log(func1(arr)); // expected: A.B\\n```\\n:::tip\\nThe various functions used in the above example from the ramda library are all curried. By composing various methods with compose, a new function that can achieve the target functionality is obtained.\\n:::"},{"id":"vue-grid-layout","metadata":{"permalink":"/danny-website/blog/vue-grid-layout","source":"@site/blog/vue-grid-layout/index.md","title":"Vue-grid-layout","description":"Business Scenario","date":"2023-12-01T00:00:00.000Z","tags":[{"inline":false,"label":"Javscript","permalink":"/danny-website/blog/tags/javscript","description":"Javscript tag description"}],"readingTime":1.9,"hasTruncateMarker":true,"authors":[{"name":"marvin-season","title":"Maintainer of Docusaurus","url":"https://github.com/marvin-season","imageURL":"https://avatars.githubusercontent.com/u/64943287?v=4","key":"marvin-season","page":null}],"frontMatter":{"slug":"vue-grid-layout","title":"Vue-grid-layout","authors":["marvin-season"],"tags":["javscript"],"date":"2023-12-01"},"unlisted":false,"prevItem":{"title":"Functional Programming","permalink":"/danny-website/blog/functional-programming"}},"content":"## Business Scenario\\n\\nUsers can perform operations such as **dragging** and **resizing** the content on the page to customize the layout of the page.\\n\\n[demo](https://codesandbox.io/embed/vue-grid-layout-vue2-x38xpy?fontsize=14&hidenavigation=1&theme=dark)\\n\\n## What is Vue-Grid-Layout?\\n\\n[Vue-Grid-Layout](https://jbaysolutions.github.io/vue-grid-layout/) is a drag-and-drop layout component that can meet the above requirements. It is a secondary development based on [Gridster](http://dsmorse.github.io/gridster.js/), supporting drag-and-drop, scaling, responsive layout, etc.\\n\x3c!--truncate  --\x3e\\n## How to Use?\\n\\n### Installation\\n\\n```bash\\nnpm install vue-grid-layout --save\\n# or\\nyarn add vue-grid-layout\\n```\\n\\n### Usage\\n\\nIt\'s very simple, a container component, and an element component. The container component is mainly responsible for the layout, and the element component is responsible for displaying the content you want to fill.\\n\\n```vue\\n<template>\\n <grid-layout>\\n    <grid-item></grid-item>\\n  </grid-layout>\\n</template>\\n<script>\\nimport { GridLayout, GridItem } from \\"vue-grid-layout\\";\\n```\\n\\n[Note: Complete basic code](#section)\\n\\n---\\n\\n## Learn More\\n\\n### Two Concepts\\n\\n**Container Component**: GridLayout has an important property called layout\\n\\n- layout is an array\\n- Each item in the array determines the layout of the element component in the container\\n- The array corresponds to the element components one by one\\n\\n**Element Component**: Just fill the content you want to display into the element component.\\n\\nNote: The meaning of the fields in the array items:\\n\\n```ts\\n{\\n  i: string // id\\n  x: number // x-axis,\\n  y: number // y-axis,\\n  w: number // width,\\n  h: number // height\\n  static: boolean // won\'t be draggable, resizable or moved by other items\\n  // other custom properties\\n}\\n```\\n\\nNote: The attribute configuration of the element component:\\n\\n[Refer to the official website GridLayout](https://jbaysolutions.github.io/vue-grid-layout/guide/properties.html#gridlayout)\\n\\n[Refer to the official website GridLayout-Item](https://jbaysolutions.github.io/vue-grid-layout/guide/properties.html#griditem)\\n\\n### Extended Configuration\\n\\n`Resizable`\\n\\n```vue\\n<grid-layout :isResizable=\\"true\\" :layout.sync=\\"layout\\" :col-num=\\"12\\" <grid-item>...</grid-item>   \\n>\\n</grid-layout>\\n```\\n\\n`Draggable`\\n\\n```vue\\n<grid-layout :is-draggable=\\"true\\" :layout.sync=\\"layout\\" :col-num=\\"12\\" <grid-item>...</grid-item>   \\n>\\n</grid-layout>\\n```\\n\\n`Responsive`\\n\\n```vue\\n<grid-layout\\n  :responsive=\\"true\\"\\n  :responsiveLayouts=\\"{ lg: [...layout] }\\"\\n  :breakpoints=\\"breakpoints\\"\\n  :cols=\\"cols\\"\\n  :layout.sync=\\"layout\\"\\n  :col-num=\\"12\\"\\n  <grid-item\\n>...</grid-item>   \\n>\\n</grid-layout>\\n```\\n\\n<a id=\\"section\\"></a>\\n\\n## Complete Basic Code\\n\\n```vue\\n<template>\\n  <grid-layout :layout.sync=\\"layout\\">\\n    <grid-item\\n      v-for=\\"item in layout\\"\\n      :key=\\"item.i\\"\\n      :x=\\"item.x\\"\\n      :y=\\"item.y\\"\\n      :w=\\"item.w\\"\\n      :h=\\"item.h\\"\\n      :i=\\"item.i\\"\\n    >\\n      12321\\n    </grid-item>\\n  </grid-layout>\\n</template>\\n\\n<script>\\nimport { GridLayout, GridItem } from \'vue-grid-layout\'\\n\\nexport default {\\n  components: { GridLayout, GridItem },\\n  data() {\\n    return {\\n      layout: [\\n        { x: 0, y: 0, w: 3, h: 2, i: \'1\', static: false },\\n        { x: 6, y: 0, w: 3, h: 2, i: \'2\', static: false },\\n      ],\\n    }\\n  },\\n}\\n<\/script>"}]}}')}}]);